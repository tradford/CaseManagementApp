@page "/attorneys/delete"
@using Microsoft.EntityFrameworkCore
@using CaseManagementApp.Models
@using Microsoft.AspNetCore.Authorization
@inject IAttorneyRepository AttorneyRepository
@inject NavigationManager NavigationManager

@attribute [Authorize(Roles = "Attorney, Paralegal, Admin")]

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Attorney</h2>
    <hr />
    @if (attorney is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@attorney.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Email</dt>
            <dd class="col-sm-10">@attorney.Email</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">PhoneNumber</dt>
            <dd class="col-sm-10">@attorney.PhoneNumber</dd>
        </dl>
        <EditForm method="post" Model="attorney" OnValidSubmit="DeleteAttorney" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(attorney is null)">Delete</button> |
            <a href="/attorneys">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Attorney? attorney;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        attorney = await AttorneyRepository.GetByIdAsync(Id);

        if (attorney is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteAttorney()
    {
        await AttorneyRepository.DeleteAsync(Id);
        NavigationManager.NavigateTo("/attorneys");
    }
}
