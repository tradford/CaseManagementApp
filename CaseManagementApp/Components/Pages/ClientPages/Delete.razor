@page "/clients/delete"
@using Microsoft.EntityFrameworkCore
@using CaseManagementApp.Models
@inject IDbContextFactory<CaseManagementApp.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Client</h2>
    <hr />
    @if (client is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">FullName</dt>
            <dd class="col-sm-10">@client.FullName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Email</dt>
            <dd class="col-sm-10">@client.Email</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">PhoneNumber</dt>
            <dd class="col-sm-10">@client.PhoneNumber</dd>
        </dl>
        <EditForm method="post" Model="client" OnValidSubmit="DeleteClient" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(client is null)">Delete</button> |
            <a href="/clients">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Client? client;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        client = await context.Clients.FirstOrDefaultAsync(m => m.Id == Id);

        if (client is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteClient()
    {
        using var context = DbFactory.CreateDbContext();
        context.Clients.Remove(client!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/clients");
    }
}
