@page "/brownsteincases/delete"
@using CaseManagementApp.Models
@inject ICaseRepository CaseRepository
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>BrownsteinCase</h2>
    <hr />
    @if (brownsteincase is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">CaseNumber</dt>
            <dd class="col-sm-10">@brownsteincase.CaseNumber</dd>

            <dt class="col-sm-2">CaseType</dt>
            <dd class="col-sm-10">@brownsteincase.CaseType</dd>

            <dt class="col-sm-2">Status</dt>
            <dd class="col-sm-10">@brownsteincase.Status</dd>

            <dt class="col-sm-2">AttorneyId</dt>
            <dd class="col-sm-10">@brownsteincase.AttorneyId</dd>

            <dt class="col-sm-2">Attorney</dt>
            <dd class="col-sm-10">@brownsteincase.Attorney?.Name</dd>
        </dl>
        <EditForm method="post" Model="brownsteincase" OnValidSubmit="DeleteBrownsteinCase" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(brownsteincase is null)">Delete</button> |
            <a href="/brownsteincases">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private BrownsteinCase? brownsteincase;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        brownsteincase = await CaseRepository.GetByIdAsync(Id);

        if (brownsteincase is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteBrownsteinCase()
    {
        await CaseRepository.DeleteAsync(Id);
        NavigationManager.NavigateTo("/brownsteincases");
    }
}
