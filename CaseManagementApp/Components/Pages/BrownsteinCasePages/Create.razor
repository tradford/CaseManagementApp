@page "/brownsteincases/create"
@using CaseManagementApp.Models
@using Microsoft.AspNetCore.Authorization
@inject ICaseRepository CaseRepository
@inject IAttorneyRepository AttorneyRepository
@inject IClientRepository ClientRepository
@inject NavigationManager NavigationManager

@attribute [Authorize(Roles = "Attorney, Paralegal, Admin")]

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>BrownsteinCase</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm Model="BrownsteinCase" OnValidSubmit="AddBrownsteinCase" FormName="create" Method="post" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <!-- Case Number -->
            <div class="mb-3">
                <label for="casenumber" class="form-label">Case Number:</label>
                <InputText id="casenumber" @bind-Value="BrownsteinCase.CaseNumber" class="form-control" aria-required="true" />
                <ValidationMessage For="() => BrownsteinCase.CaseNumber" class="text-danger" />
            </div>

            <!-- Case Type -->
            <div class="mb-3">
                <label for="CaseType" class="form-label">Case Type:</label>
                <select id="CaseType" class="form-select" @bind="BrownsteinCase.CaseType">
                    @foreach (var type in Enum.GetValues(typeof(CaseType)))
                    {
                        <option value="@type">@type</option>
                    }
                </select>
                <ValidationMessage For="() => BrownsteinCase.CaseType" class="text-danger" />
            </div>

            <!-- Status -->
            <div class="mb-3">
                <label for="Status" class="form-label">Status:</label>
                <select id="Status" class="form-select" @bind="BrownsteinCase.Status">
                    @foreach (var status in Enum.GetValues(typeof(CaseStatus)))
                    {
                        <option value="@status">@status</option>
                    }
                </select>
                <ValidationMessage For="() => BrownsteinCase.Status" class="text-danger" />
            </div>

            <!-- Attorney -->
            <div class="mb-3">
                <label class="form-label">Select Attorney:</label>
                <InputRadioGroup @bind-Value="BrownsteinCase.AttorneyId" class="form-check">
                    @foreach (var attorney in AllAttorneys)
                    {
                        <div class="form-check">
                            <InputRadio Value="@attorney.Id" class="form-check-input" />
                            <label class="form-check-label">@attorney.Name</label>
                        </div>
                    }
                </InputRadioGroup>
                <ValidationMessage For="() => BrownsteinCase.AttorneyId" class="text-danger" />
            </div>

            <!-- Client -->
            <div class="mb-3">
                <label class="form-label">Select Client:</label>
                <InputRadioGroup @bind-Value="BrownsteinCase.ClientId" class="form-check">
                    @foreach (var client in AllClients)
                    {
                        <div class="form-check">
                            <InputRadio Value="@client.Id" class="form-check-input" />
                            <label class="form-check-label">@client.FullName</label>
                        </div>
                    }
                </InputRadioGroup>
                <ValidationMessage For="() => BrownsteinCase.ClientId" class="text-danger" />
            </div>

            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/brownsteincases">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private BrownsteinCase BrownsteinCase { get; set; } = new();

    private List<Attorney> AllAttorneys = new();
    private List<Client> AllClients = new();

    protected override async Task OnInitializedAsync()
    {
        AllClients = await ClientRepository.GetAllAsync();
        AllAttorneys = await AttorneyRepository.GetAllAsync();
    }

    private async Task AddBrownsteinCase()
    {
        await CaseRepository.AddAsync(BrownsteinCase);
        NavigationManager.NavigateTo("/brownsteincases");
    }
}
