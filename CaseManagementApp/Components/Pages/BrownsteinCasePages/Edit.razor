@page "/brownsteincases/edit"
@using CaseManagementApp.Models
@using Microsoft.AspNetCore.Authorization
@inject ICaseRepository CaseRepository
@inject IAttorneyRepository AttorneyRepository
@inject IClientRepository ClientRepository
@inject NavigationManager NavigationManager

@attribute [Authorize(Roles = "Attorney, Admin")]

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>BrownsteinCase</h2>
<hr />
@if (BrownsteinCase is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="BrownsteinCase" OnValidSubmit="UpdateBrownsteinCase" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert" />
                <input type="hidden" name="BrownsteinCase.Id" value="@BrownsteinCase.Id" />

                <!-- Case Number -->
                <div class="mb-3">
                    <label for="casenumber" class="form-label">Case Number:</label>
                    <InputText id="casenumber" @bind-Value="BrownsteinCase.CaseNumber" class="form-control" />
                    <ValidationMessage For="() => BrownsteinCase.CaseNumber" />
                </div>

                <!-- Case Type -->
                <div class="mb-3">
                    <label class="form-label">Case Type:</label>
                    <InputRadioGroup @bind-Value="BrownsteinCase.CaseType" class="form-check">
                        @foreach (CaseType type in Enum.GetValues(typeof(CaseType)))
                        {
                            <div class="form-check">
                                <InputRadio class="form-check-input" Value="@type" />
                                <label class="form-check-label">@type</label>
                            </div>
                        }
                    </InputRadioGroup>
                    <ValidationMessage For="() => BrownsteinCase.CaseType" />
                </div>

                <!-- Status -->
                <div class="mb-3">
                    <label class="form-label">Status:</label>
                    <InputRadioGroup @bind-Value="BrownsteinCase.Status" class="form-check">
                        @foreach (CaseStatus status in Enum.GetValues(typeof(CaseStatus)))
                        {
                            <div class="form-check">
                                <InputRadio class="form-check-input" Value="@status" />
                                <label class="form-check-label">@status</label>
                            </div>
                        }
                    </InputRadioGroup>
                    <ValidationMessage For="() => BrownsteinCase.Status" />
                </div>

                <!-- Client -->
                <div class="mb-3">
                    <label class="form-label">Select Client:</label>

                    <InputRadioGroup @bind-Value="BrownsteinCase.ClientId" class="form-check">
                        @foreach (var client in AllClients)
                        {
                            <div class="form-check">
                                <InputRadio class="form-check-input" Value="@client.Id" />
                                <label class="form-check-label">@client.FullName</label>
                            </div>
                        }
                    </InputRadioGroup>

                    <ValidationMessage For="() => BrownsteinCase.ClientId" />
                </div>

                <!-- Attorney -->
                <div class="mb-3">
                    <label class="form-label">Attorney:</label>
                    <InputRadioGroup @bind-Value="BrownsteinCase.AttorneyId" class="form-check">
                        @foreach (var attorney in AllAttorneys)
                        {
                            <div class="form-check">
                                <InputRadio Value="@attorney.Id" class="form-check-input" />
                                <label class="form-check-label">@attorney.Name</label>
                            </div>
                        }
                    </InputRadioGroup>
                    <ValidationMessage For="() => BrownsteinCase.AttorneyId" />
                </div>

                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/brownsteincases">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private BrownsteinCase BrownsteinCase { get; set; } = new();  // used for postback binding only

    private BrownsteinCase? DisplayModel; // used only for pre-loading to pre-populate form
    private List<Attorney> AllAttorneys = new();
    private List<Client> AllClients = new();

    protected override async Task OnInitializedAsync()
    {
        DisplayModel = await CaseRepository.GetByIdAsync(Id);

        if (DisplayModel is null)
        {
            NavigationManager.NavigateTo("notfound");
            return;
        }

        // Prepopulate the form model only if it's not already filled (i.e., on GET not POST)
        if (BrownsteinCase.Id == 0)
        {
            BrownsteinCase = new BrownsteinCase
                {
                    Id = DisplayModel.Id,
                    CaseNumber = DisplayModel.CaseNumber,
                    CaseType = DisplayModel.CaseType,
                    Status = DisplayModel.Status,
                    ClientId = DisplayModel.ClientId,
                    AttorneyId = DisplayModel.AttorneyId
                };
        }

        AllAttorneys = await AttorneyRepository.GetAllAsync();
        AllClients = await ClientRepository.GetAllAsync();
    }

    private async Task UpdateBrownsteinCase()
    {
        Console.WriteLine("Form Submit:");
        Console.WriteLine($"ClientId: {BrownsteinCase.ClientId}, AttorneyId: {BrownsteinCase.AttorneyId}, CaseType: {BrownsteinCase.CaseType}, Status: {BrownsteinCase.Status}");

        await CaseRepository.UpdateAsync(BrownsteinCase);
        NavigationManager.NavigateTo("/brownsteincases");
    }
}

