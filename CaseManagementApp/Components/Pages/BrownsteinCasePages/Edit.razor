@page "/brownsteincases/edit"
@using CaseManagementApp.Models
@inject ICaseRepository CaseRepository
@inject IAttorneyRepository AttorneyRepository
@inject IClientRepository ClientRepository
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>BrownsteinCase</h2>
<hr />
@if (BrownsteinCase is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="BrownsteinCase" OnValidSubmit="UpdateBrownsteinCase" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert" />
                <input type="hidden" name="BrownsteinCase.Id" value="@BrownsteinCase.Id" />

                <!-- Case Number -->
                <div class="mb-3">
                    <label for="casenumber" class="form-label">Case Number:</label>
                    <InputText id="casenumber" @bind-Value="BrownsteinCase.CaseNumber" class="form-control" />
                    <ValidationMessage For="() => BrownsteinCase.CaseNumber" />
                </div>

                <!-- Case Type -->
                <div class="mb-3">
                    <label for="casetype" class="form-label">Case Type:</label>
                    <select id="casetype" class="form-select" @bind="BrownsteinCase.CaseType">
                        @foreach (var type in Enum.GetValues(typeof(CaseType)))
                        {
                            <option value="@((int)type)">@type</option>
                        }
                    </select>
                    <ValidationMessage For="() => BrownsteinCase.CaseType" />
                </div>

                <!-- Status -->
                <div class="mb-3">
                    <label for="status" class="form-label">Status:</label>
                    <select id="status" class="form-select" @bind="BrownsteinCase.Status">
                        @foreach (var status in Enum.GetValues(typeof(CaseStatus)))
                        {
                            <option value="@((int)status)">@status</option>
                        }
                    </select>
                    <ValidationMessage For="() => BrownsteinCase.Status" />
                </div>

                <!-- Client -->
                <div class="mb-3">
                    <label class="form-label">Select Client:</label>
                    <InputRadioGroup @bind-Value="BrownsteinCase.ClientId" class="form-check">
                        @foreach (var client in AllClients)
                        {
                            <div class="form-check">
                                <InputRadio Value="@client.Id" class="form-check-input" />
                                <label class="form-check-label">@client.FullName</label>
                            </div>
                        }
                    </InputRadioGroup>
                    <ValidationMessage For="() => BrownsteinCase.ClientId" />
                </div>

                <!-- Attorney -->
                <div class="mb-3">
                    <label class="form-label">Attorney:</label>
                    <InputRadioGroup @bind-Value="BrownsteinCase.AttorneyId" class="form-check">
                        @foreach (var attorney in AllAttorneys)
                        {
                            <div class="form-check">
                                <InputRadio Value="@attorney.Id" class="form-check-input" />
                                <label class="form-check-label">@attorney.Name</label>
                            </div>
                        }
                    </InputRadioGroup>
                    <ValidationMessage For="() => BrownsteinCase.AttorneyId" />
                </div>

                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/brownsteincases">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private BrownsteinCase? BrownsteinCase { get; set; }

    private List<Attorney> AllAttorneys = new();
    private List<Client> AllClients = new();

    protected override async Task OnInitializedAsync()
    {
        BrownsteinCase = await CaseRepository.GetByIdAsync(Id);

        if (BrownsteinCase is null)
        {
            NavigationManager.NavigateTo("notfound");
            return;
        }

        AllAttorneys = await AttorneyRepository.GetAllAsync();
        AllClients = await ClientRepository.GetAllAsync();
    }

    private async Task UpdateBrownsteinCase()
    {
        if (BrownsteinCase is not null)
        {
            await CaseRepository.UpdateAsync(BrownsteinCase);
            NavigationManager.NavigateTo("/brownsteincases");
        }
    }
}
